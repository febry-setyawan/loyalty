# Main CI/CD Pipeline for Loyalty System
# Handles build, test, security scan, and deployment for all microservices
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  JAVA_VERSION: '17'
  MAVEN_CACHE_KEY: loyalty-maven-cache

jobs:
  # Job 1: Common Library Build and Test
  test-common:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}-common-${{ runner.os }}-${{ hashFiles('shared/libs/common/pom.xml') }}
          restore-keys: |
            ${{ env.MAVEN_CACHE_KEY }}-common-${{ runner.os }}-

      - name: Run common library unit tests
        run: |
          cd shared/libs/common
          mvn clean test -Dspring.profiles.active=test

      - name: Generate test coverage report
        run: |
          cd shared/libs/common
          mvn jacoco:report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./shared/libs/common/target/site/jacoco/jacoco.xml
          flags: common-library
          name: common-library-coverage
          fail_ci_if_error: false

      - name: Install common library to local repository
        run: |
          cd shared/libs/common
          mvn clean install -DskipTests

  # Job 2: Code Quality and Testing for Services
  test:
    runs-on: ubuntu-latest
    needs: test-common
    strategy:
      matrix:
        service: [user-service, point-service, rewards-service, admin-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ env.MAVEN_CACHE_KEY }}-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ env.MAVEN_CACHE_KEY }}-${{ runner.os }}-

      - name: Run unit tests
        run: |
          cd services/${{ matrix.service }}
          mvn clean test -Dspring.profiles.active=test

      - name: Run integration tests  
        run: |
          cd services/${{ matrix.service }}
          mvn clean integration-test -Dspring.profiles.active=test -DskipUnitTests=true
        env:
          DATABASE_URL: jdbc:h2:mem:testdb
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage report
        run: |
          cd services/${{ matrix.service }}
          mvn jacoco:report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

  # Job 3: Security Scanning for Common Library
  security-common:
    runs-on: ubuntu-latest
    needs: test-common

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          cd shared/libs/common
          mvn org.owasp:dependency-check-maven:check -DnvdMaxRetryCount=3 -DnvdApiDelay=8000

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: shared/libs/common/target/dependency-check-report.sarif
          category: dependency-check-common-library

  # Job 4: Security Scanning for Services
  security:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [user-service, point-service, rewards-service, admin-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          cd services/${{ matrix.service }}
          mvn org.owasp:dependency-check-maven:check -DnvdMaxRetryCount=3 -DnvdApiDelay=8000

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: services/${{ matrix.service }}/target/dependency-check-report.sarif
          category: dependency-check-${{ matrix.service }}

  # Job 5: Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, security, security-common]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [user-service, point-service, rewards-service, admin-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.0'

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}

  # Job 6: Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Will be implemented with Kubernetes/ECS deployment scripts

  # Job 7: Deploy to Staging  
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Will be implemented with Kubernetes/ECS deployment scripts

  # Job 8: Deploy to Production (Manual Approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment  
        run: |
          echo "Deploying to production environment..."
          # Will be implemented with Blue-Green deployment strategy