# User Service Configuration
spring:
  application:
    name: user-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:loyalty}
    username: ${DB_USERNAME:loyalty_user}
    password: ${DB_PASSWORD:loyalty_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: user-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

  mail:
    host: ${SMTP_HOST:}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: "*"

server:
  port: ${SERVER_PORT:8080}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    com.example.loyalty: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{requestId}] %logger{36} - %msg%n"

# Custom application properties
loyalty:
  service:
    name: user-service
    version: 1.0.0

# App-specific configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080,http://localhost:5173}
  
  development:
    use-hardcoded-user-id: ${USE_HARDCODED_USER_ID:true}
    hardcoded-user-id: ${HARDCODED_USER_ID:550e8400-e29b-41d4-a716-446655440000}
  
  jwt:
    secret: ${JWT_SECRET:default-secret-key-change-in-production-this-should-be-at-least-256-bits}
    refresh-secret: ${JWT_REFRESH_SECRET:default-refresh-secret-change-in-production-this-should-be-at-least-256-bits}
    access-expiration: ${JWT_ACCESS_EXPIRATION:900000}  # 15 minutes
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7 days
    issuer: ${JWT_ISSUER:loyalty-system}
  
  email:
    smtp:
      host: ${SMTP_HOST:smtp.gmail.com}
      port: ${SMTP_PORT:587}
      username: ${SMTP_USERNAME:}
      password: ${SMTP_PASSWORD:}
      from: ${EMAIL_FROM:noreply@loyalty.example.com}
      from-name: ${EMAIL_FROM_NAME:Loyalty System}
    
  sms:
    provider: ${SMS_PROVIDER:log}  # Options: log, twilio
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
      from-number: ${TWILIO_FROM_NUMBER:}