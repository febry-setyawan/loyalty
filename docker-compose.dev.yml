# Docker Compose for Loyalty System Development Environment
# Based on framework/cicd/pipeline-templates.md

services:
  # ============================================================================
  # DATABASES
  # ============================================================================
  postgres:
    image: postgres:15
    container_name: loyalty-postgres
    environment:
      POSTGRES_DB: loyalty
      POSTGRES_USER: loyalty_user
      POSTGRES_PASSWORD: loyalty_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/schemas/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loyalty_user -d loyalty"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: loyalty-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # MESSAGE QUEUE
  # ============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: loyalty-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - loyalty-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: loyalty-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - loyalty-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server kafka:29092
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # MICROSERVICES
  # ============================================================================
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    container_name: loyalty-user-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=loyalty
      - DB_USERNAME=loyalty_user
      - DB_PASSWORD=loyalty_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  point-service:
    build:
      context: ./services/point-service
      dockerfile: Dockerfile.dev
    container_name: loyalty-point-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=loyalty
      - DB_USERNAME=loyalty_user
      - DB_PASSWORD=loyalty_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/point-service:/app
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  rewards-service:
    build:
      context: ./services/rewards-service
      dockerfile: Dockerfile.dev
    container_name: loyalty-rewards-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=loyalty
      - DB_USERNAME=loyalty_user
      - DB_PASSWORD=loyalty_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_SERVERS=kafka:29092
      - S3_BUCKET=loyalty-dev-assets
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/rewards-service:/app
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile.dev
    container_name: loyalty-admin-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=loyalty
      - DB_USERNAME=loyalty_user
      - DB_PASSWORD=loyalty_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_SERVERS=kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./services/admin-service:/app
    networks:
      - loyalty-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # API GATEWAY
  # ============================================================================
  api-gateway:
    image: kong:3.4-ubuntu
    container_name: loyalty-api-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./infrastructure/docker/kong/kong.yml:/kong/declarative/kong.yml
    depends_on:
      - user-service
      - point-service
      - rewards-service
      - admin-service
    networks:
      - loyalty-network

  # ============================================================================
  # MONITORING AND OBSERVABILITY
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: loyalty-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - loyalty-network

  grafana:
    image: grafana/grafana:10.1.0
    container_name: loyalty-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - loyalty-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  loyalty-network:
    driver: bridge